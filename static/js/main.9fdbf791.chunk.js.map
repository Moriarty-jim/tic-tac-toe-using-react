{"version":3,"sources":["Components/GameBoard.js","Components/Restart.js","Components/GameStats.js","App.js","index.js"],"names":["GameBoard","props","clickHandler","e","boardIndex","target","id","boardState","gameState","innerHTML","currentPlayer","boardStateHandler","restartState","document","querySelectorAll","forEach","cell","setRestartState","className","onClick","Restart","restartHandler","GameStats","gameStats","winConditions","validation","setGameState","setCurrentPlayer","setGameStats","gameWon","boardStateAsarray","Object","entries","value","push","console","log","i","individualCondition","a","b","c","includes","App","useState","setBoardState","firstTurn","setFirstTurn","gameCount","setGameCount","useEffect","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9fdbf791.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst GameBoard = (props) => {\r\n  //   const [boardState, setBoardState] = useState([\r\n  //     \"\",\r\n  //     \"\",\r\n  //     \"\",\r\n  //     \"\",\r\n  //     \"\",\r\n  //     \"\",\r\n  //     \"\",\r\n  //     \"\",\r\n  //     \"\",\r\n  //   ]);\r\n  //   const [boardState, setBoardState] = useState({\r\n  //     \"0\": \"\",\r\n  //     \"1\": \"\",\r\n  //     \"2\": \"\",\r\n  //     \"3\": \"\",\r\n  //     \"4\": \"\",\r\n  //     \"5\": \"\",\r\n  //     \"6\": \"\",\r\n  //     \"7\": \"\",\r\n  //     \"8\": \"\",\r\n  //   });\r\n\r\n  const clickHandler = (e) => {\r\n    // e.preventDefault();\r\n    const boardIndex = e.target.id;\r\n    // console.log(boardIndex);\r\n    // console.log(props.boardState);\r\n    if (props.boardState[boardIndex] !== \"\" || !props.gameState) {\r\n      // console.log(\"asd\");\r\n      return;\r\n    }\r\n    e.target.innerHTML = props.currentPlayer;\r\n    props.boardStateHandler(e);\r\n  };\r\n\r\n  if (props.restartState) {\r\n    document\r\n      .querySelectorAll(\".grid-item\")\r\n      .forEach((cell) => (cell.innerHTML = \"\"));\r\n    props.setRestartState(false);\r\n  }\r\n\r\n  return (\r\n    <div className=\"grid-container \">\r\n      <div className=\"grid-item r1c1\" id=\"0\" onClick={clickHandler}></div>\r\n      <div className=\"grid-item r1c2\" id=\"1\" onClick={clickHandler}></div>\r\n      <div className=\"grid-item r1c3\" id=\"2\" onClick={clickHandler}></div>\r\n      <div className=\"grid-item r2c1\" id=\"3\" onClick={clickHandler}></div>\r\n      <div className=\"grid-item r2c2\" id=\"4\" onClick={clickHandler}></div>\r\n      <div className=\"grid-item r2c3\" id=\"5\" onClick={clickHandler}></div>\r\n      <div className=\"grid-item r3c1\" id=\"6\" onClick={clickHandler}></div>\r\n      <div className=\"grid-item r3c2\" id=\"7\" onClick={clickHandler}></div>\r\n      <div className=\"grid-item r3c3\" id=\"8\" onClick={clickHandler}></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameBoard;\r\n","import React from \"react\";\r\n\r\nconst Restart = (props) => {\r\n  //   const onClickRestart = (e) => {\r\n  //     console.log(\"restart\");\r\n  //     props.restartHandler();\r\n  //   };\r\n\r\n  return (\r\n    <button className=\"btn-restart\" onClick={props.restartHandler}>\r\n      Restart\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Restart;\r\n","import React from \"react\";\r\nimport Restart from \"./Restart\";\r\n\r\nconst GameStats = (props) => {\r\n  return (\r\n    <div className=\"game-stats\">\r\n      <div className=\"turn-indicator\">{props.gameStats}</div>\r\n      <div>\r\n        <Restart restartHandler={props.restartHandler} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameStats;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./styles.css\";\nimport GameBoard from \"./Components/GameBoard\";\nimport GameStats from \"./Components/GameStats\";\n\nconst App = () => {\n  const [boardState, setBoardState] = useState({\n    \"0\": \"\",\n    \"1\": \"\",\n    \"2\": \"\",\n    \"3\": \"\",\n    \"4\": \"\",\n    \"5\": \"\",\n    \"6\": \"\",\n    \"7\": \"\",\n    \"8\": \"\",\n  });\n  const [currentPlayer, setCurrentPlayer] = useState(\"X\");\n  const [gameState, setGameState] = useState(true);\n  const [firstTurn, setFirstTurn] = useState(true);\n  const [gameStats, setGameStats] = useState(\"\");\n  const [restartState, setRestartState] = useState(false);\n  const [gameCount, setGameCount] = useState(1);\n\n  const boardStateHandler = (e) => {\n    const boardIndex = e.target.id;\n    setBoardState({ ...boardState, [boardIndex]: currentPlayer });\n  };\n\n  const restartHandler = () => {\n    console.log(\"app restart\");\n    setRestartState(true);\n    setBoardState({\n      \"0\": \"\",\n      \"1\": \"\",\n      \"2\": \"\",\n      \"3\": \"\",\n      \"4\": \"\",\n      \"5\": \"\",\n      \"6\": \"\",\n      \"7\": \"\",\n      \"8\": \"\",\n    });\n    setGameState(true);\n    setCurrentPlayer(\"X\");\n    setFirstTurn(true);\n    setGameStats(`its ${currentPlayer}'s turn`);\n    setGameCount(gameCount + 1);\n  };\n\n  useEffect(() => {\n    if (!firstTurn) {\n      validation(\n        setGameState,\n        boardState,\n        currentPlayer,\n        setCurrentPlayer,\n        setGameStats\n      );\n    } else {\n      setFirstTurn(false);\n    }\n    // console.log(boardState);\n  }, [boardState]);\n\n  useEffect(() => {\n    setGameStats(`its ${currentPlayer}'s turn`);\n  }, [currentPlayer]);\n\n  useEffect(() => {\n    if (gameCount % 2 === 0) {\n      setCurrentPlayer(\"O\");\n    } else {\n      setCurrentPlayer(\"X\");\n    }\n  }, [gameCount]);\n\n  return (\n    <div className=\"main-container\">\n      <h1>TIC TAC TOE</h1>\n      <GameBoard\n        boardStateHandler={boardStateHandler}\n        currentPlayer={currentPlayer}\n        boardState={boardState}\n        gameState={gameState}\n        restartState={restartState}\n        setRestartState={setRestartState}\n      />\n      <GameStats gameStats={gameStats} restartHandler={restartHandler} />\n    </div>\n  );\n};\n\nconst winConditions = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6],\n];\n\nconst validation = (\n  setGameState,\n  boardState,\n  currentPlayer,\n  setCurrentPlayer,\n  setGameStats\n) => {\n  let gameWon = false;\n  let boardStateAsarray = [];\n  for (const [key, value] of Object.entries(boardState)) {\n    boardStateAsarray.push(value);\n  }\n  console.log(boardStateAsarray);\n  for (let i = 0; i < 8; i++) {\n    let individualCondition = winConditions[i];\n    let a = boardStateAsarray[individualCondition[0]];\n    let b = boardStateAsarray[individualCondition[1]];\n    let c = boardStateAsarray[individualCondition[2]];\n\n    if (a === \"\" || b === \"\" || c === \"\") {\n      continue;\n    }\n    if (a === b && b === c) {\n      gameWon = true;\n      break;\n    }\n  }\n  if (gameWon) {\n    setGameState(false);\n    setGameStats(`${currentPlayer} won the game`);\n    return;\n  }\n  if (!boardStateAsarray.includes(\"\")) {\n    setGameState(false);\n    setGameStats(\"its a draw\");\n    return;\n  }\n  currentPlayer === \"X\" ? setCurrentPlayer(\"O\") : setCurrentPlayer(\"X\");\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// serviceWorker.unregister();\n"],"sourceRoot":""}